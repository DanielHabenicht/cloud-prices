# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Query Data

on:
  push:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      force_data_query:
        description: 'Force data querying'
        required: false
        default: false
        type: boolean
jobs:
  data:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.find_run_id.outputs.run_id }}

    env:
      python-version: '3.10'
      poetry_version: '1.8.3'
    steps:
    - name: Find last run ID with artifact "data"
      id: find_run_id
      uses: actions/github-script@v7
      with:
        script: |
          const ONE_DAY_MS = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
          const now = new Date();
          const runs = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          let runId = null;

          for (const run of runs.data.workflow_runs) {
            const runTime = new Date(run.created_at);
            const timeDifference = now - runTime;

            if (timeDifference > ONE_DAY_MS) {
              continue; // Skip runs older than 24 hours
            }

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id
            });

            if (artifacts.data.artifacts.some(artifact => artifact.name === 'data')) {
              runId = run.id;
              break;
            }
          }

          if (runId) {
            console.log(`Found run ID: ${runId}`);
            core.setOutput('run_id', runId);
          } else {
            console.log('No run found with an artifact named "data" within the last 24 hours.');
          }

    - name: Display the run ID
      if: steps.find_run_id.outputs.run_id == ''
      run: echo "The run ID of the last run with the artifact 'data' is ${{ steps.find_run_id.outputs.run_id }}."

    - name: Override run ID
      id: use_override_run_id
      if: inputs.force_data_query
      run: echo "::set-output name=run_id::${{ github.run_id }}"

    - uses: actions/checkout@v2
      if: steps.find_run_id.outputs.run_id == '' || inputs.force_data_query
    - name: Set up Python ${{ env.python-version }}
      if: steps.find_run_id.outputs.run_id == '' || inputs.force_data_query
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}

    - name: cache poetry install
      if: steps.find_run_id.outputs.run_id == '' || inputs.force_data_query
      id: cache-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: python-${{ env.python-version }}-poetry-${{ env.poetry_version }}-0

    - uses: snok/install-poetry@v1
      if: (steps.find_run_id.outputs.run_id == '' || inputs.force_data_query) && steps.cache-poetry.outputs.cache-hit != 'true'
      with:
        version: ${{ env.poetry_version }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: cache deps
      if: steps.find_run_id.outputs.run_id == '' || inputs.force_data_query
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: .venv
        key: python-${{ env.python-version }}-pydeps-${{ hashFiles('**/poetry.lock') }}

    - run: poetry install --no-interaction
      if: (steps.find_run_id.outputs.run_id == '' || inputs.force_data_query) && steps.cache-deps.outputs.cache-hit != 'true'

    - name: Query
      if: steps.find_run_id.outputs.run_id == '' || inputs.force_data_query
      run: |
        poetry run python azure.py

    - name: Upload a Build Artifact
      if: steps.find_run_id.outputs.run_id == '' || inputs.force_data_query
      uses: actions/upload-artifact@v4.3.5
      with:
        name: data
        path: frontend/public/test_new.sqlite
              
  frontend:
    runs-on: ubuntu-latest
    needs: [data]

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

   # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # Allow one concurrent deployment
    concurrency:
      group: 'pages'
      cancel-in-progress: true

    steps:
    - uses: actions/checkout@v2
    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: "20"
        cache: "npm"
        cache-dependency-path: frontend/package-lock.json

    - name: Build
      run: |
        npm ci
        npm run build -- --base=/cloud-prices/ 
      working-directory: frontend

    - name: Download Data
      if: needs.data.outputs.run_id == ''
      uses: actions/download-artifact@v4.1.8
      with:  
        name: data
        path: frontend/dist

    - name: Download Data
      if: needs.data.outputs.run_id
      uses: actions/download-artifact@v4.1.8
      with:  
        name: data
        path: frontend/dist
        github-token: ${{ github.token }}
        run-id: ${{ needs.data.outputs.run_id }}


        
    - name: Debug
      run: |
        tree
      working-directory: frontend/dist

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v3.0.1
      with:
        # Path of the directory containing the static assets.
        path: frontend/dist
              
    - name: Deploy GitHub Pages site
      id: deployment
      uses: actions/deploy-pages@v4.0.5              
